# This workflow builds the client (UI), the server, builds the JAR.

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  # This job builds the client (web view).
  photonclient-build:

    # Let all steps run within the photon-client dir.
    defaults:
      run:
        working-directory: photon-client

    # The type of runner that the job will run on.
    runs-on: ubuntu-22.04

    steps:
    # Checkout code.
    - uses: actions/checkout@v3

    # Setup Node.js
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 16

    # Run npm
    - run: npm update -g npm
    - run: npm ci
    - run: npm run build --if-present

    # Upload client artifact.
    - uses: actions/upload-artifact@master
      with:
        name: built-client
        path: photon-client/dist/

  photon-build-all:
    # The type of runner that the job will run on.
    runs-on: ubuntu-22.04

    steps:
      # Checkout code.
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Fetch tags.
      - name: Fetch tags
        run: git fetch --tags --force

      # Install Java 17.
      - name: Install Java 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      # Run only build tasks, no checks??
      - name: Gradle Build
        run: |
          chmod +x gradlew
          ./gradlew photon-server:build -x check --max-workers 2

      # Run Gradle Tests.
      - name: Gradle Tests
        run: ./gradlew testHeadless -i --max-workers 1 --stacktrace
        
        
  photonserver-build-offline-docs:
    runs-on: ubuntu-22.04

    steps:
      # Checkout docs.
      - uses: actions/checkout@v3
        with:
          repository: 'PhotonVision/photonvision-docs.git'
          ref: master

      # Install Python.
      - uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install sphinx sphinx_rtd_theme sphinx-tabs sphinxext-opengraph doc8
          pip install -r requirements.txt

      - name: Build the docs
        run: |
          make html
      # Upload docs artifact.
      - uses: actions/upload-artifact@master
        with:
          name: built-docs
          path: build/html
    
  photonserver-check-lint:
    # The type of runner that the job will run on.
    runs-on: ubuntu-22.04

    steps:
      # Checkout code.
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Install Java 17.
      - uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      # Check server code with Spotless.
      - run: |
          chmod +x gradlew
          ./gradlew spotlessCheck

  photon-build-package:
    needs: [photonclient-build, photon-build-all, photonserver-build-offline-docs]

    strategy:
        fail-fast: false
        matrix:
          include:
            - os: ubuntu-latest
              artifact-name: LinuxArm64
              architecture: x64
              arch-override: linuxarm64

    # The type of runner that the job will run on.
    runs-on: ${{ matrix.os }}
    name: "Build fat JAR - ${{ matrix.artifact-name }}"

    steps:
      # Checkout code.
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Install Java 17.
      - uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      # Clear any existing web resources.
      - run: |
          rm -rf photon-server/src/main/resources/web/*
          mkdir -p photon-server/src/main/resources/web/docs
        if: ${{ (matrix.os) != 'windows-latest' }}
      - run: |
          del photon-server\src\main\resources\web\*.*
          mkdir photon-server\src\main\resources\web\docs
        if: ${{ (matrix.os) == 'windows-latest' }}

      # Download client artifact to resources folder.
      - uses: actions/download-artifact@v3
        with:
          name: built-client
          path: photon-server/src/main/resources/web/

      # Download docs artifact to resources folder.
      - uses: actions/download-artifact@v3
        with:
          name: built-docs
          path: photon-server/src/main/resources/web/docs

      # Build fat jar for both pi and everything
      - run: |
          chmod +x gradlew
          ./gradlew photon-server:shadowJar --max-workers 2 -PArchOverride=${{ matrix.arch-override }}
        if: ${{ (matrix.arch-override != 'none') }}
      - run: |
          chmod +x gradlew
          ./gradlew photon-server:shadowJar --max-workers 2
        if: ${{ (matrix.arch-override == 'none') }}

      # Upload final fat jar as artifact.
      - uses: actions/upload-artifact@v3
        with:
          name: jar-${{ matrix.artifact-name }}
          path: photon-server/build/libs


  photon-image-generator:
    needs: [photon-build-package]
    if: ${{ github.event_name != 'pull_request' }}
    strategy:
        fail-fast: false
        matrix:
          include:
            - os: ubuntu-latest
              artifact-name: LinuxArm64
              image_suffix: RaspberryPi
              image_url: https://api.github.com/repos/texastorque/torque-vision-pi-gen/releases/tags/v2023.4.2

    runs-on: ${{ matrix.os }}
    name: "Build image - ${{ matrix.image_url }}"

    steps:
      # Checkout code.
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v2
        with:
          name: jar-${{ matrix.artifact-name }}

      - name: Generate image
        run: |
          chmod +x scripts/generatePiImage.sh
          ./scripts/generatePiImage.sh ${{ matrix.image_url }} ${{ matrix.image_suffix }}

      - uses: actions/upload-artifact@v3
        name: Upload image
        with:
          name: image-${{ matrix.image_suffix }}
          path: torquevision*.xz


  photon-release:
    needs: [photon-build-package, photon-image-generator]
    runs-on: ubuntu-22.04
    steps:
      # Download literally every single artifact. This also downloads client and docs,
      # but the filtering below won't pick these up (I hope)
      - uses: actions/download-artifact@v2

      - run: find

      # Push to dev release
      - uses: pyTooling/Actions/releaser@r0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: 'Dev'
          rm: true
          files: |
            **/*.xz
            **/*.jar
        if: github.event_name == 'push'

      # Upload all jars and xz archives
      - uses: softprops/action-gh-release@v1
        with:
          files: |
            **/*.xz
            **/*.jar
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

